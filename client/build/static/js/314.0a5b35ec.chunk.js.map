{"version":3,"file":"static/js/314.0a5b35ec.chunk.js","mappings":"wMAKMA,EAAYC,EAAAA,GAAAA,IAAH,wXAgDf,IAfmC,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAUC,GAAY,YAC1D,GAAsBC,EAAAA,EAAAA,IAASD,GAA/B,eAAOE,EAAP,KAAcC,EAAd,KACA,OACE,SAACN,EAAD,WACE,SAAC,KAAD,0BACMG,GACAE,GAFN,IAGEH,MAAOA,EACPK,SAAOD,EAAKE,UAAWF,EAAKC,OAC5BE,WAAYH,EAAKE,SAAWF,EAAKC,OAASD,EAAKC,a,8JC4CvD,UA9D4B,WAE1B,IAAQG,GAAUC,EAAAA,EAAAA,MAAVD,MACFH,GAAQK,EAAAA,EAAAA,IAAe,SAACC,GAAD,OAAWA,EAAMC,KAAKP,SAC7CQ,GAAWC,EAAAA,EAAAA,MAEjBC,EAAAA,EAAAA,YAAU,WACR,OAAO,WACLF,GAASG,EAAAA,EAAAA,SAEV,CAACH,IAEJ,IAIMI,EAAQ,mCAAG,WAAOC,GAAP,iFACTL,GAASM,EAAAA,EAAAA,IAAU,CAAEX,MAAAA,EAAOY,KAAMF,KADzB,2CAAH,sDAGRG,EAAmBC,EAAAA,GAAW,CAClCC,SAAUD,EAAAA,KAAaE,WAAWC,IAAI,GAAGC,IAAI,IAC7CC,gBAAiBL,EAAAA,KACdE,WACAC,IAAI,GACJC,IAAI,IACJE,KAAK,kBAAmB,6BAA6B,SAAUC,GAC9D,OAAOC,KAAKC,OAAOR,WAAaM,OAItC,OACE,SAAC,KAAD,WACE,UAAC,KAAD,YACE,SAAC,KAAD,kCACCxB,IAAS,SAAC,KAAD,CAAYA,OAAK,EAAjB,SAAmBA,KAE7B,SAAC,KAAD,CACE2B,cAzBc,CACpBT,SAAU,GACVI,gBAAiB,IAwBXV,SAAUA,EACVI,iBAAkBA,EAHpB,SAKG,gBAAGY,EAAH,EAAGA,aAAH,OACC,UAAC,KAAD,YACE,SAAC,IAAD,CAAWC,KAAK,WAAWC,KAAK,WAAWnC,MAAM,cACjD,SAAC,IAAD,CACEkC,KAAK,kBACLC,KAAK,WACLnC,MAAM,qBAGR,SAAC,KAAD,CAAQmC,KAAK,SAASC,SAAUH,EAAhC,SACGA,EAAe,aAAe,oBAEjC,SAAC,KAAD,CAAUI,GAAG,mBAAb,uC,mTC9EDvC,EAAYC,EAAAA,GAAAA,IAAH,uaAYTuC,EAAUvC,EAAAA,GAAAA,IAAH,yIAMPwC,EAAQxC,EAAAA,GAAAA,GAAH,kHAMLyC,GAAazC,EAAAA,EAAAA,IAAO0C,EAAAA,GAAP1C,CAAH,qEAKV2C,EAAS3C,EAAAA,GAAAA,OAAH,yTAiBN4C,GAAW5C,EAAAA,EAAAA,IAAO6C,EAAAA,GAAP7C,CAAH,qMAUR8C,EAAa9C,EAAAA,GAAAA,EAAH,8OACD,SAACE,GAAD,OAClBA,EAAMI,MAAQ,mBAAqB,0BAU1ByC,EAAgB/C,EAAAA,GAAAA,IAAH,oMAebgD,EAAiBhD,EAAAA,GAAAA,IAAH","sources":["components/FormInput.tsx","pages/auth/ResetPass.tsx","style/auth.styles.tsx"],"sourcesContent":["import React from \"react\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport { useField } from \"formik\";\r\nimport styled from \"styled-components\";\r\n\r\nconst Container = styled.div`\r\n  margin-top: 1.2rem;\r\n\r\n  div {\r\n    width: 100%;\r\n  }\r\n\r\n  & {\r\n    input {\r\n      font-size: 1.7rem;\r\n      width: 100%;\r\n      padding: 1.5rem;\r\n\r\n      &[type=\"password\"] {\r\n        letter-spacing: 0.2rem;\r\n      }\r\n    }\r\n\r\n    label {\r\n      font-size: 1.4rem;\r\n    }\r\n    p {\r\n      font-size: 1.2rem;\r\n      margin: 0.3rem 0.4em;\r\n    }\r\n  }\r\n`;\r\n\r\ninterface Props {\r\n  label: string;\r\n  [props: string]: any;\r\n}\r\n\r\nconst FormInput: React.FC<Props> = ({ label, ...props }) => {\r\n  const [field, meta] = useField(props as any);\r\n  return (\r\n    <Container>\r\n      <TextField\r\n        {...props}\r\n        {...field}\r\n        label={label}\r\n        error={meta.touched && meta.error ? true : false}\r\n        helperText={meta.touched && meta.error && meta.error}\r\n      />\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default FormInput;\r\n","import { Formik } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport { useEffect } from \"react\";\r\n\r\nimport {\r\n  Container,\r\n  Wrapper,\r\n  Title,\r\n  Button,\r\n  ApiMessage,\r\n  FormLink,\r\n  StyledForm,\r\n} from \"../../style/auth.styles\";\r\n\r\nimport { resetMetaData } from \"../../redux/user/slice\";\r\nimport { resetPass } from \"../../redux/user/actions\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport FormInput from \"../../components/FormInput\";\r\n\r\n// hooks\r\nimport { useAppSelector, useAppDispatch } from \"../../redux/hooks\";\r\n\r\n/////////////////////////////\r\n\r\ninterface Values {\r\n  password: string;\r\n  passwordConfirm: string;\r\n}\r\n\r\nconst ResetPass: React.FC = () => {\r\n  // Get reset token\r\n  const { token } = useParams();\r\n  const error = useAppSelector((state) => state.user.error);\r\n  const dispatch = useAppDispatch();\r\n  // Clear Error & success message\r\n  useEffect(() => {\r\n    return () => {\r\n      dispatch(resetMetaData());\r\n    };\r\n  }, [dispatch]);\r\n\r\n  const initialValues = {\r\n    password: \"\",\r\n    passwordConfirm: \"\",\r\n  };\r\n  const onSubmit = async (values: Values) => {\r\n    await dispatch(resetPass({ token, data: values }));\r\n  };\r\n  const validationSchema = Yup.object({\r\n    password: Yup.string().required().min(8).max(55),\r\n    passwordConfirm: Yup.string()\r\n      .required()\r\n      .min(8)\r\n      .max(55)\r\n      .test(\"passwordConfirm\", \"Two passwords don't match\", function (val) {\r\n        return this.parent.password === val;\r\n      }),\r\n  });\r\n\r\n  return (\r\n    <Container>\r\n      <Wrapper>\r\n        <Title>Reset Your Password</Title>\r\n        {error && <ApiMessage error>{error}</ApiMessage>}\r\n\r\n        <Formik\r\n          initialValues={initialValues}\r\n          onSubmit={onSubmit}\r\n          validationSchema={validationSchema}\r\n        >\r\n          {({ isSubmitting }) => (\r\n            <StyledForm>\r\n              <FormInput name=\"password\" type=\"password\" label=\"Password\" />\r\n              <FormInput\r\n                name=\"passwordConfirm\"\r\n                type=\"password\"\r\n                label=\"Repeat Password\"\r\n              />\r\n\r\n              <Button type=\"submit\" disabled={isSubmitting}>\r\n                {isSubmitting ? \"Loading...\" : \"Reset Password\"}\r\n              </Button>\r\n              <FormLink to=\"/forgot-password\">Forgot Pass?</FormLink>\r\n            </StyledForm>\r\n          )}\r\n        </Formik>\r\n      </Wrapper>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default ResetPass;\r\n","import styled from \"styled-components\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Form } from \"formik\";\r\n\r\nexport const Container = styled.div`\r\n  width: 100%;\r\n  height: 100vh;\r\n  background: linear-gradient(to bottom, rgba(0, 0, 0, 0.5), rgba(0, 0, 0, 0.4)),\r\n    url(\"https://images.unsplash.com/photo-1485125639709-a60c3a500bf1?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&auto=format&fit=crop&w=870&q=80\")\r\n      center;\r\n  background-size: cover;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n`;\r\n\r\nexport const Wrapper = styled.div`\r\n  width: 40rem;\r\n  padding: 2rem;\r\n  background-color: #fff;\r\n  box-shadow: 0 0.2rem 0.2rem rgba(0, 0, 0, 0.2);\r\n`;\r\nexport const Title = styled.h1`\r\n  font-size: 2.4rem;\r\n  font-weight: 500;\r\n  margin-bottom: 3rem;\r\n  text-align: center;\r\n`;\r\nexport const StyledForm = styled(Form)`\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n\r\nexport const Button = styled.button`\r\n  min-width: 40%;\r\n  border: none;\r\n  padding: 1.5rem 2rem;\r\n  background: teal;\r\n  cursor: pointer;\r\n  color: white;\r\n  margin-top: 1.5rem;\r\n  box-shadow: 0 0.2rem 0.2rem rgba(0, 0, 0, 0.3);\r\n\r\n  &:disabled {\r\n    cursor: not-allowed;\r\n    background: #ebebe4;\r\n    color: #c6c6c6;\r\n  }\r\n`;\r\n\r\nexport const FormLink = styled(Link)`\r\n  margin-top: 1.5rem;\r\n  font-size: 1.2rem;\r\n  text-decoration: underline;\r\n  display: block;\r\n  cursor: pointer;\r\n  align-self: flex-start;\r\n  text-transform: capitalize;\r\n`;\r\n\r\nexport const ApiMessage = styled.p<{ error?: boolean }>`\r\n  background-color: ${(props) =>\r\n    props.error ? \"var(--err-color)\" : \"var(--success-color)\"};\r\n  padding: 0.8rem;\r\n  color: #f5f5f5;\r\n  border-radius: 0.4rem;\r\n  display: inline-block;\r\n  margin-bottom: 1rem;\r\n  font-size: 1.3rem;\r\n  box-shadow: 0 0.2rem 0.2rem rgba(0, 0, 0, 0.1);\r\n`;\r\n\r\nexport const BtnsContainer = styled.div`\r\n  display: flex;\r\n  gap: 2rem;\r\n  margin: 2rem 0;\r\n\r\n  button {\r\n    margin: 0 !important;\r\n  }\r\n\r\n  button:last-child {\r\n    cursor: pointer;\r\n    background: #f70;\r\n  }\r\n`;\r\n\r\nexport const LinksContainer = styled.div`\r\n  margin-top: 1.2rem;\r\n  a {\r\n    margin: 0;\r\n    margin-bottom: 0.8rem;\r\n  }\r\n`;\r\n"],"names":["Container","styled","label","props","useField","field","meta","error","touched","helperText","token","useParams","useAppSelector","state","user","dispatch","useAppDispatch","useEffect","resetMetaData","onSubmit","values","resetPass","data","validationSchema","Yup","password","required","min","max","passwordConfirm","test","val","this","parent","initialValues","isSubmitting","name","type","disabled","to","Wrapper","Title","StyledForm","Form","Button","FormLink","Link","ApiMessage","BtnsContainer","LinksContainer"],"sourceRoot":""}